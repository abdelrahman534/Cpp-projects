#include <bits/stdc++.h>
#include "algorithm"
#include "chrono"
#include <random>

using namespace std;

void populate_arr(int arr[], int size);

void bubble_sort(int arr[], int size) {
    for (int i = 0; i < size - 1; i++) {//loop of traversing
        for (int j = 0; j < size - i - 1; j++) {//loop of swapping
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void print_Array(int arr[], int size) {
    for (int i; i < size; i++) {
        cout << arr[i] << " ";

    }
}

int main() {
//    time_t start, end;
    /* Time function returns the time since the
        Epoch(jan 1 1970). Returned time is in seconds. */
    ios_base::sync_with_stdio(false);
    int size;
    int arr[size];
    cout << "Type the Array desired size : " << endl;
    cin >> size;
//    cout << "Type the desired array elements : " << endl;
//    for (int i = 0; i < size; i++) {
//        cin >> arr[i];
//    }
    populate_arr(arr, size);
//    time(&start);
    auto start = chrono::steady_clock::now();
    bubble_sort(arr, size);
//    time(&end);
    auto stop = chrono::steady_clock::now();
    cout << "Sorted Array : " << endl;
    print_Array(arr, size);
    auto duration = chrono::duration_cast<chrono::microseconds>(stop - start);
    cout << "\nTime taken by program is : " << fixed
         << duration.count() << setprecision(15);
    cout << " sec " << endl;
}

void populate_arr(int arr[], int size) {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dist(1,50000);
    for (int i = 0; i < size; i++) {
        arr[i] = dist(gen) % 100;
    }
}
